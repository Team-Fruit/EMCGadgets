buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
    }
}

// Plugins
plugins {
    id 'com.palantir.git-version' version '0.7.1'
    id 'co.riiid.gradle' version '0.4.2'
    id 'com.jfrog.bintray' version '1.8.4'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

// Configure Utility
allprojects {
    project.metaClass {
        isProperty = { propName ->
            return delegate.hasProperty(propName)&&!delegate.property(propName).empty
        }
    }
}

// Configure Variables
import org.apache.commons.lang.StringUtils
ext {
    mod_commonname = "${rootProject.name}-common"
    mod_build_prefix = 'build/b'

    mod_travis = System.getenv('TRAVIS') as boolean
    mod_buildnumber = System.getenv('TRAVIS_BUILD_NUMBER') as Integer
    mod_buildtag = System.getenv('TRAVIS_TAG')
    mod_prerelease = mod_autorelease = mod_travis && StringUtils.isEmpty(mod_buildtag)

    if (mod_buildtag!=null && mod_buildtag.startsWith(mod_build_prefix))
        throw new GradleException("Oops, circulated travis build. A push starting with the prefix '${mod_build_prefix}' was detected: ${mod_buildtag}")

    mod_git_repo = plugins.findPlugin('com.palantir.git-version').gitRepo(rootProject).repository
    mod_git_head = mod_git_repo.getRef('HEAD').objectId.name()

    mod_version_min = ({
        def git_ref = mod_git_repo.getRef "refs/remotes/origin/update"
        if (git_ref!=null) {
            def git_revwalk = new org.eclipse.jgit.revwalk.RevWalk(mod_git_repo)
            try {
                return git_revwalk.parseCommit(git_ref.getObjectId()).getShortMessage()
            } catch(org.eclipse.jgit.errors.IncorrectObjectTypeException e) {
            } finally {
                git_revwalk.dispose()
            }
        }
        return null
    })()
    if (mod_version_min==null) {
        assert project.isProperty('version_major'): 'missing property: version_major'
        assert project.isProperty('version_minor'): 'missing property: version_minor'
        assert project.isProperty('version_patch'): 'missing property: version_patch'
        mod_version_min = "${project.version_major}.${project.version_minor}.${project.version_patch}"
    }
    println("ModVersion: ${mod_version_min}")

    (mod_version_build, mod_version_meta) = ({
        if (mod_buildnumber)
            return [".${mod_buildnumber}", '']
        else
            return ({
                def buildnumberfile = file '.buildnumber/buildnum.properties'

                def version_build = ({
                    def buildnumbermicro = 1
                    def props = new Properties()
                    if (buildnumberfile.exists())
                        buildnumberfile.withInputStream { stream ->
                            props.load stream
                        }

                    if (props.buildnumber && props.version == mod_version_min)
                        buildnumbermicro = props.buildnumber as Integer
                    return buildnumbermicro
                })()

                def buildtextmicro = String.format('%03d', version_build)
                def buildtext = "+${buildtextmicro}"

                task increment {
                    doLast {
                        def props = new Properties()
                        props.version = mod_version_min
                        props.buildnumber = version_build+1 as String
                        buildnumberfile.parentFile.mkdirs()
                        buildnumberfile.withOutputStream { stream ->
                            props.store stream, 'Build Number Property'
                        }
                    }
                }

                subprojects {
                    afterEvaluate {
                        tasks.build.dependsOn increment
                    }
                }

                ['', buildtext]
            })()
    })()

    mod_version = "${mod_version_min}${mod_version_build}"
    mod_version_full = "${mod_version}${mod_version_meta}"
    mod_artifacts_dir = file "artifacts/${mod_version_min}/${mod_version_full}"

    // Parse Changelog
    def parseChangelog = { changelog ->
        def title = null
        def msg = null
        def releasetype = 'release'

        if (changelog!=null) {
            // Beta mode and Alpha mode
            if (StringUtils.contains(changelog, '[beta]')) {
                changelog = StringUtils.replace(changelog, '[beta]', '')
                releasetype = 'beta'
            } else if (StringUtils.contains(changelog, '[alpha]')) {
                changelog = StringUtils.replace(changelog, '[alpha]', '')
                releasetype = 'alpha'
            }

            // Split Title and Body
            def tagtitle = StringUtils.substringBefore(changelog, '\n')
            def tagmsg = StringUtils.stripStart(StringUtils.substringAfter(changelog, '\n'), '\n')
            if (!StringUtils.isEmpty(tagtitle))
                title = tagtitle
            if (!StringUtils.isEmpty(tagmsg))
                msg = tagmsg
        }
        return [title, msg, releasetype]
    }

    // Changelog Text
    (mod_changelog_title, mod_changelog, mod_releasetype) = ({
        // Get Changelog from Git Tag or File
        def (changelog_title, changelog, releasetype) = parseChangelog(({
            if (!StringUtils.isEmpty(mod_buildtag)) {
                def git_ref = mod_git_repo.getRef "refs/tags/${mod_buildtag}"

                if (git_ref!=null) {
                    def git_revwalk = new org.eclipse.jgit.revwalk.RevWalk(mod_git_repo)
                    try {
                        return git_revwalk.parseTag(git_ref.getObjectId()).getFullMessage()
                    } catch(org.eclipse.jgit.errors.IncorrectObjectTypeException e) {
                    } finally {
                        git_revwalk.dispose()
                    }
                }
            } else {
                def fileChangelog = project.isProperty('extra_changelog_location') ? file(project.extra_changelog_location) : file('changelog.md')
                if (fileChangelog.exists())
                    return fileChangelog.getText('UTF-8')
            }
            return null
        })())

        // Replace Version Text
        def convertChangelog = { str ->
            def str1 = str
                    .replace('{version}', mod_version)
                    .replace('{version_full}', mod_version_full)
            if (mod_buildnumber!=null)
                return str1
                        .replace('{version_number}', "${mod_buildnumber}")
            return str1
        }

        // Generate Default Changelog
        def (n_changelog_title, n_changelog) = ({
            if (mod_buildnumber!=null)
                return ["v${mod_version}", "v${mod_version_min} Build${mod_buildnumber}"]
            else
                return ["v${mod_version_full}", "v${mod_version_full}"]
        })()

        if (changelog_title!=null)
            n_changelog_title = convertChangelog(changelog_title)
        if (changelog!=null)
            n_changelog = convertChangelog(changelog)
        return [n_changelog_title, n_changelog, releasetype]
    })()

    sec_curseforge_key = System.getenv('CURSEFORGE_TOKEN') ?: project.isProperty('api_key_curseforge') ? project.api_key_curseforge : null
    sec_github_user = System.getenv('GITHUB_ACTOR') ?: project.isProperty('api_user_github') ? project.api_user_github : null
    sec_github_key = System.getenv('GH_TOKEN') ?: project.isProperty('api_key_github') ? project.api_key_github : null
    sec_bintray_user = System.getenv('BINTRAY_USER') ?: project.isProperty('api_user_bintray') ? project.api_user_bintray : null
    sec_bintray_key = System.getenv('BINTRAY_KEY') ?: project.isProperty('api_key_bintray') ? project.api_key_github : null
}

// Configure Source Sets
apply plugin: project.forgegradle_plugin
def fg_plugin = plugins.findPlugin project.forgegradle_plugin

apply plugin: 'maven-publish'

// Configure Version
version = mod_version
archivesBaseName = project.modname

// FG3 task
if (project.forgegradle.contains('3.+')) {
    task setupCIWorkspace
    task setupDevWorkspace(dependsOn: 'prepareRuns')
    task setupDecompWorkspace(dependsOn: 'prepareRuns')
}

minecraft {
    if (project.isProperty('version_mappings'))
        mappings = project.version_mappings

    if (project.forgegradle.contains('3.+')) {
        accessTransformer = file('./src/main/resources/META-INF/accesstransformer.cfg')

        runs {
            client {
                taskName = "${project.name}_Client"

                if (!project.isProperty('run_location'))
                    workingDirectory project.file('run')
                else
                    workingDirectory project.file(run_location.replace('{modid}', project.modid).replace('{mcversion}', project.version_minecraft))

                property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

                // property 'forge.logging.console.level', 'debug'

                mods {
                    create(project.modid) {
                        source sourceSets.main
                    }
                }
            }

            server {
                taskName = "${project.name}_Server"

                if (!project.isProperty('run_location'))
                    workingDirectory project.file('run')
                else
                    workingDirectory project.file(run_location.replace('{modid}', project.modid).replace('{mcversion}', project.version_minecraft))

                property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

                // property 'forge.logging.console.level', 'debug'

                mods {
                    create(project.modid) {
                        source sourceSets.main
                    }
                }
            }

            data {
                taskName = "${project.name}_Data"

                if (!project.isProperty('run_location'))
                    workingDirectory project.file('run')
                else
                    workingDirectory project.file(run_location.replace('{modid}', project.modid).replace('{mcversion}', project.version_minecraft))

                property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

                // property 'forge.logging.console.level', 'debug'

                args '--mod', project.modid, '--all', '--output', file('src/generated/resources/')

                mods {
                    create(project.modid) {
                        source sourceSets.main
                    }
                }
            }
        }
    } else {
        version = "${project.version_minecraft}-${project.version_forge}"

        if (!project.isProperty('run_location'))
            runDir = 'run'
        else
            runDir = run_location.replace('{modid}', project.modid).replace('{mcversion}', project.version_minecraft)

        replaceIn 'VersionReference.java'
        replace '${version}', mod_version
        replace '${mcversion}', project.version_minecraft
        replace '${forgeversion}', project.version_forge
    }
}

repositories {
    mavenCentral()
    maven {
        name 'CurseForge'
        url "https://minecraft.curseforge.com/api/maven/"
    }
}

dependencies {
    deobfCompile "projecte:ProjectE:1.12.2:PE1.4.1"
    deobfCompile "building-gadgets:BuildingGadgets:2.8.1"
    deobfCompile "project-ex:ProjectEX:1.2.0.39"

    if (project.forgegradle.contains('3.+')) {
        minecraft "net.minecraftforge:forge:${project.version_minecraft}-${project.version_forge}"
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", mod_version
    inputs.property "mcversion", project.version_minecraft

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version": project.version, "mcversion": project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

// Jar Manifest
ext.commonManifest = {
    if (project.isProperty('extra_fmlcore'))
        attributes 'FMLCorePlugin': project.extra_fmlcore
    if (project.isProperty('extra_fmlmod'))
        attributes 'FMLCorePluginContainsFMLMod': project.extra_fmlmod
    if (project.isProperty('extra_fmlat'))
        attributes 'FMLAT': project.extra_fmlat

    if (project.forgegradle.contains('3.+')) {
        attributes([
                "Specification-Title": project.modid,
                "Specification-Vendor": project.modvendor,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.modname,
                "Implementation-Version": project.mod_version,
                "Implementation-Vendor": project.modvendor,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // Prevent from CurseForge duplicate error
    attributes 'ModVersionFull': mod_version_full
    attributes 'ModVersion': mod_version
    attributes 'ForgeVersion': project.version_forge
    attributes 'MinecraftVersion': project.version_minecraft
}

jar {
    classifier 'universal'
    manifest commonManifest
}

// Output Jar Source
sourceJar {
    classifier 'sources'
    manifest commonManifest
}

// Output Jar Dev
task devJar(dependsOn: 'classes', type: Jar) {
    from sourceSets.main.output
    from sourceSets.api.output
    classifier 'dev'
    manifest commonManifest
}

// Output Jar
artifacts {
    archives jar
    archives devJar
    archives sourceJar
}

// Release GitHub
if (sec_github_key!=null&&project.isProperty('extra_github_owner')&&project.isProperty('extra_github_repo')) {
    //tasks.githubRelease.enabled = !mod_autorelease
    github {
        tasks.githubRelease.dependsOn 'build'
        prerelease = mod_prerelease
        owner = project.extra_github_owner
        repo = project.extra_github_repo
        token = sec_github_key
        tagName = mod_travis ? (mod_autorelease ? "${mod_build_prefix}${mod_buildnumber}" : mod_buildtag) : mod_version_full
        targetCommitish = mod_git_head
        name = mod_changelog_title
        body = mod_changelog
        draft = false
        def allassets = [jar]
        subprojects.each { p ->
            allassets.addAll([p.tasks.jar, p.tasks.devJar, p.tasks.sourceJar, p.tasks.apiJar])
        }
        assets = allassets*.outputs*.files*.asPath*.tr('\\','/')
    }
} else
    tasks.githubRelease.enabled = false

// Maven Publishing
publishing {
    publications {
        ModPublication(MavenPublication) {
            groupId = project.group
            artifactId = project.modid
            version = "${mod_version}"
            artifact jar
        }

        "ModPublication-${project.version_minecraft}"(MavenPublication) {
            groupId = project.group
            artifactId = project.modid
            version = "${project.version_minecraft}-${mod_version}"
            artifact jar
            artifact devJar
            artifact sourceJar
            // artifact apiJar
        }
    }

    if (!mod_autorelease) {
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/${project.extra_github_owner}/${project.extra_github_repo}")
                credentials {
                    username = sec_github_user
                    password = sec_github_key
                }
            }
        }
    }
}

// Release Bintray
if (sec_bintray_user!=null&&sec_bintray_key!=null&&project.isProperty('extra_bintray_repo')&&project.isProperty('extra_bintray_name')) {
    bintray {
        tasks.bintrayUpload.enabled = !mod_autorelease
        user = sec_bintray_user
        key = sec_bintray_key
        def pubs = ['ModPublication']
        subprojects.each { p ->
            if (p.name!=mod_commonname)
                pubs += "ModPublication-${p.version_minecraft}"
        }
        publications = pubs

        publish = true
        pkg {
            userOrg = project.extra_bintray_org
            repo = project.extra_bintray_repo
            name = project.extra_bintray_name
            version {
                name = "${mod_version}"
                released = new Date()
                desc = "${mod_changelog_title}"+(StringUtils.isEmpty(mod_changelog)?'':"\n\n${mod_changelog}")
                vcsTag = mod_buildtag
            }
        }
    }
} else
    tasks.bintrayUpload.enabled = false

// Release CurseForge
if (sec_curseforge_key!=null&&project.isProperty('extra_curseforge_id')) {
    curseforge {
        tasks.curseforge.enabled = !mod_autorelease

        tasks.curseforge.dependsOn 'build'
        apiKey = sec_curseforge_key
        project {
            id = project.extra_curseforge_id

            changelogType = 'markdown'
            changelog = mod_changelog

            releaseType = mod_releasetype

            mainArtifact(jar) {
                displayName = "${jar.baseName}-${jar.version}"
            }
            [/*jar, */devJar, sourceJar/*, apiJar*/].each { jar ->
                addArtifact(jar) {
                    displayName = "${jar.baseName}-${jar.version}-${jar.classifier}"
                }
            }

            addGameVersion 'Forge'

            if (project.isProperty('extra_curseforge_dependency')) {
                relations {
                    requiredLibrary project.extra_curseforge_dependency
                }
            }
        }
    }
} else
    tasks.curseforge.enabled = false
